---
# tasks file for power_vm
- name: Iniciando o controle de tasks
  block:
    - name: Garantir que vm_name seja uma lista
      ansible.builtin.set_fact:
        vm_name_list: >-
          {{
             (vm_name) | split(',') | map('trim') | list
             if vm_name is string else vm_name
          }}

    - name: Obter informações das VMs informadas
      openstack.cloud.server_info:
        name: "{{ item }}"
      loop: "{{ vm_name_list }}"
      loop_control:
        label: "{{ item }}"
      register: all_vm_info

    - name: Verificar quais VMs existem
      ansible.builtin.set_fact:
      # Para loop, pegar o .results, embora não apareça no output do register
        vms_existentes: >-
          {{
             all_vm_info.results
             | selectattr('valor', 'defined')
             | selectattr('valor', (truthy')
             | map(attribute='valor')
             | map('first')
             | map(attribute='name')
             | list             
             | select('in', vm_name_list)
             | list
          }}
        vms_inexistentes: >-
          {{
            vm_name_list
            | difference(
              all_vm_info.results
              | selectattr('valor', 'defined')
              | selectattr('valor', 'truthy')
              | map(attribute='valor')
              | map('first')
              | map(atribute='name')
              | list
            )
          }}        

    - name: Exibir mensagem para VMs existentes
      ansible.builtin.debug:
        msg: "A VM '{{ item }}' foi encontrada neste cluster"
      loop: "{{ vms_existentes }}"

    - name: Exibir mensagem para VMs inexistentes
      ansible.builtin.debug:
        msg: "A(s) VM(s) {{ vms_inexistentes }} | join(', ') }} não existem neste cluster!"
      when: vms_inexistentes | length > 0

    - name: Exibir erro se nenhuma vm informada voi localizada
      ansible.builtin.fail:
        msg: "Nenhuma vm informada foi localizada neste cluster!"
      when: vms_existentes | default('') | length == 0

#- name: Iniciando o controle de tasks
#  block:
#    - name: Realizar a operação de "{{ vm_action }}" nas VMs existentes
#      openstack.cloud.server_action:
#        server: "{{ item }}"
#        action: "{{ vm_action }}"
#        timeout: 1800
#      register: vm_restart
#      loop: "{{ vms_existentes }}"
#      loop_control:
#        label: "{{ item }}"
#
